doc-build() {
  IMAGE=localhost/suse-latex
  DOCKER_OPTS=''
  if [ -n "$TEXMF" ]; then
    DOCKER_OPTS="${DOCKER_OPTS} -v${TEXMF}:/home/build/texmf:ro"
  fi
  CMD="cd ~/svn; make $@"
  # puppet docs "automagic"
  if [ -x ./inputdoc ]; then
    [[ -z "$1" ]] && CMD='cd ~/svn/; ./inputdoc'
  fi
  if [ "$1" = 'shell' ]; then
    CMD='/bin/bash'
  elif [ "$1" = 'single' ]; then
    if [ -z "$2" ]; then
      echo You need to supply a filename
      exit 1
    fi
    CMD="cd ~/svn; pdflatex $2"
  elif [ "$1" = 'command' ]; then
    if [ -z "$2" ]; then
      echo You need to supply a command
      exit 1
    fi
    CMD="cd ~/svn; $2"
  fi
  podman run -t -i --net=none --userns keep-id --rm $DOCKER_OPTS -v $(pwd):/home/build/svn:z $IMAGE bash -c "$CMD"
}

alias usbguard='sudo usbguard'
alias cd..='cd ..'
alias shellescape='sed -e "s/\([\ ()]\)/\\\\1/g"'

# provide direct access to different terraform versions
alias tf13='podman run -ti --workdir $(pwd) -v $(pwd):/$(pwd) -v ~/.ssh:/root/.ssh -v ~/b1/os_config:/root/.config/openstack:ro --rm docker.io/hashicorp/terraform:0.13.6'
alias tf14='podman run -ti -e TF_LOG=TRACE -e TF_LOG_PATH="$(pwd)/terraform.log" --workdir $(pwd) -v $(pwd):/$(pwd) -v ~/.ssh:/root/.ssh -v ~/b1/os_config:/root/.config/openstack:ro --rm docker.io/hashicorp/terraform:0.14.10'

salt-ssh() {
  podman run -ti --rm -w $(pwd) -v $(pwd):$(pwd) -v $HOME:$HOME -v $HOME:/root -e HOME=/root salt-ssh:3002 salt-ssh --no-host-keys $@
}

salt-docs() {
  u="$HOME/git/salt/doc/_build/html/ref/index.html"
  [[ -f "$u" ]] && surf "$u"
}

pcr_print() {
  pcrs=/sys/class/tpm/tpm0/pcr-sha1
  for a in $(seq 0 23); do echo -ne "$a:\t"; cat "${pcrs}/$a";done
}

json2yaml() {
  cat | python -c 'import sys, yaml, json; print(yaml.dump(json.loads(sys.stdin.read())))'
}

ec2_instances() {
  aws ec2 describe-instances  \
  --query "Reservations[*].Instances[*].{InstanceID:InstanceId,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,Name:Tags[?Key=='Name']|[0].Value,Type:InstanceType,Status:State.Name,VpcId:VpcId}" \
  --filters Name=instance-state-name,Values=running \
  --output table
}

ssm_session() {
  aws ssm start-session --target $@
}
